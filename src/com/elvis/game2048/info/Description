2048

Part 1

Hi! I hope you've grown tired of ordinary tasks and are eagerly anticipating a big one!
Today we'll write a Java implementation of the game 2048. In short, if you haven't heard anything about this game, the goal is to get a tile with a value of 2048 on a 4x4 board. You can read more on Wikipedia: https://en.wikipedia.org/wiki/2048_(video_game)

To begin, we're going to need the following classes:
1. Controller - It will monitor keystrokes during the game.
2. Model - It will contain the game logic and store the game board.
3. View - It will provide a view of the current state of the game.
4. Main - It will contain only the main method, serving as the entry point for our application.

Create them!

Part 2
In the game 2048 game, the board consists of 16 tiles, each of which has a certain weight.
In addition to weight, a tile has its own color and text color used to display the tile's weight.
Tile colors range from light gray to red, and the text color depends on the color of the tile.

Create a Tile class that will describe a single tile.
It will need the following:
1. An int value field with default access.
2. A constructor with a parameter that initializes the value field.
3. A constructor without parameters (initializes the value field to zero).
4. An isEmpty method that returns true if the value field is 0, otherwise false.
5. A getFontColor method that returns a new Color object (0x776e65) if the tile weight is less than 16, otherwise 0xf9f6f2.

6. The getTileColor method, which returns the color of a tile depending on its weight, according to the following values:
0: (0xcdc1b4);
2: (0xeee4da);
4: (0xede0c8);
8: (0xf2b179);
16: (0xf59563);
32: (0xf67c5f);
64: (0xf65e3b);
128: (0xedcf72);
256: (0xedcc61);
512: (0xedc850);
1024: (0xedc53f);
2048: (0xedc22e);
for any other values: (0xff0000).

The methods listed above should not be private.

Part 3
Let's implement the Model class. It will be responsible for all manipulations performed on the game board.

But to manipulate the game board, we ought to start by creating it!

We're going to need:
1. A private constant FIELD_WIDTH = 4, which defines the width of the game board.
2. A private two-dimensional gameTiles array consisting of Tile objects.
3. A constructor without parameters that initializes the game board and populates it with empty tiles.

Part 4
The game 2048 begins on a board where two tiles already have initial values. But our board is still empty :(.

Before you rush to write code, let's think about how this could be implemented.

I suggest creating a private addTile method that will look at which tiles are empty. And if there are empty tiles, it will change the weight of one of them, chosen at random, to 2 or 4 (there should be 1 four for every 9 twos).

To get a random item from the list, you can use the following expression: (list size * random number between zero and one).

You can also get empty tiles using a separate private getEmptyTiles method that returns a list of the empty tiles in the gameTiles array.

After implementing the functionality for adding new tiles, add two addTile method calls to the constructor to satisfy the task's starting condition.

P.S. Perhaps it would be worth it to move all the code from the constructor to a resetGameTiles method so that starting a new game doesn't require creating a new model. You could instead simply return to the initial state by calling this method. The access level should be wider than private.

P.P.S. To calculate the weight of a new tile, use the expression (Math.random () < 0.9 ? 2 : 4).

Part 5
The main actions that we need to enable are movements left, right, up and down.
If you've already played 2048, then you know that when you move in a direction, tiles with values move to empty tiles, and tiles with the same value combine.

As a basic scenario, let's consider movement to the left and think about what happens when we want to do this action.

For each row or column, two things actually happen:
a) Consolidate the tiles so that all the empty tiles are on the right, i.e. the row {4, 2, 0, 4} becomes {4, 2, 4, 0}
b) Merge tiles with the same value, i.e. the row {4, 4, 2, 0} becomes {8, 2, 0, 0}.
Note that the row {4, 4, 4, 4} will become {8, 8, 0, 0}, and {4, 4, 4, 0} becomes {8, 4, 0 , 0}.

Create consolidateTiles(Tile[] tiles) and mergeTiles(Tile[] tiles) methods that implement steps a) and b) respectively. We will use them only inside the Model class, so give them the narrowest possible access.

Also, add int score and int maxTile fields, which should store the current score and the highest tile weight on the game board. The score increases after each merger. For example, if the current score is 20 and the row {4, 4, 4, 0} is merged, then the score should increase by 8. The access level for these fields should be wider than private.
The easiest thing to do is to update these fields in the mergeTiles method, for example:
1) If the tile merger condition is satisfied, check whether the new value is greater than the maximum value and, if necessary, change the value of the maxTile field.
2) Increase the value of the score field by the amount of the tile weight generated by the merger.

P.S. When we implement the movement methods, tiles will always be consolidated before they are merged, so you can assume that the mergeTiles method will always be passed an array of tiles that does not have empty tiles in the middle.

Part 6
So, you've implemented tile consolidation and merging. The combination of these operations gives us the ability to move to the left.
Great! But we also need to add a new tile if the game board was changed by the movement.

Let's do the following:
1. Change the consolidateTiles method so that it returns true if it makes changes to the input array, otherwise false.
2. Do the same for the mergeTiles method.
3. Implement the left method, which will call the consolidateTiles and mergeTiles methods for each row of the gameTiles array and, if necessary, use the addTile method to add a tile.
4. The left method should not be private, since it will be called from the Controller class and elsewhere.

Part 7
We've implemented movement to the left. Now we need to implement the right, up, and down methods. I'm sure you can handle it without my help, so I'll give you just one hint.

What happens if you rotate a two-dimensional array clockwise by 90 degrees, shift it to the left, and then rotate three times?

Part 8
The model is almost ready! Let's add a couple more simple methods and start implementing the controller.

Our model lacks a way to get the game board in order to pass it to the view for rendering, as well as a method that can determine whether a move is possible in the current position.

For its part, the controller will be mainly used to handle user input from the keyboard, so we'll make it a child of the KeyAdapter class.

We're going to need private model and view fields of the appropriate types, as well as getGameTiles and getScore methods that return the corresponding properties of the model.

Breaking it into simple steps:
1. Add a getter for the gameTiles field to the Model class.
2. Add to the Model class a canMove method that returns true if a move that changes the state of the game board is possible given the current position. Otherwise, it should return false.
3. Make the Controller class a child of the KeyAdapter class.
4. Add to the Controller class a getGameTiles method that calls the same method on the model.
5. Add to the Controller class a getScore method that returns the current score (model.score).

Part 9
You're doing really well! It's so good that I decided to help you a little and have already implemented the View class.
It's quite simple. It inherits the JPanel class, overrides the paint method, and displays the current state of the model obtained using the controller.

But you have to finish implementing the Controller class.

To start, we're going to need a constructor. It will have one Model parameter, initialize the model field, and also save a new View object in the view field, passing the current controller (this) to the constructor.

Next, we need a resetGame method that can return the game board to its initial state. You need to reset the score, set the isGameWon and isGameLost flags on the view to false, and call the resetGameTiles method on the model.

Note: set the field values directly, without using setters.

Add a private constant int WINNING_TILE = 2048. It will determine the tile weight that, when achieved, constitutes a win.

And now, the most important thing! To be able to process user input, you need to override the keyPressed method with a single KeyEvent parameter.

The logic of the method should be as follows:
1) If the ESC key was pressed, call the resetGame method.
2) If the model's canMove method returns false, set the isGameLost flag to true.
3) If both the isGameLost and isGameWon flags are false, process the movement events:
a) for KeyEvent.VK_LEFT, call the left method on the model;
b) for KeyEvent.VK_RIGHT, call the right method on the model;
c) for KeyEvent.VK_UP key, call the up method on the model;
d) for KeyEvent.VK_DOWN key, call the down method on the model.
4) If the model's maxTile field becomes equal to WINNING_TILE, set the isGameWon flag to true.
5) Finally, call the repaint method on the view.

P.S. To get the key code, use the KeyEvent class's getKeyCode method.

Part 10
It's time to start implementing the main method in the Main classâ€”to finally be able to launch the game and relax!

We only need the main method to run the application. We've already implemented all the guts.
To do this, in the main method, we'll create a model and controller, as well as a JFrame object. I'll call it game, but you can choose any name you want.

We will need to call some methods on our game (JFrame object) in order for everything to be displayed correctly on the screen:

game.setTitle("2048");
game.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
game.setSize(450, 500);
game.setResizable(false);

game.add(controller.getView());

game.setLocationRelativeTo(null);
game.setVisible(true);
Pay attention to the add method to which we pass the view from the controller. We don't yet have a getter for the view field in the Controller class. Don't forget to add it.
P.S. Finishing this task will result in a working version of the game 2048. If something doesn't work, or doesn't work as expected, be sure to figure it out and fix it before moving on to the subsequent tasks.

Part 11
Good work! At this stage, we already have a full-featured application, but thereâ€™s no limit to perfection. Let's do some more work.

If you've managed to play 2048 a little, you've noticed that sometimes you really want to be able to undo your last move.

Let's create two stacks in the Model class: one to store the previous states of the game board, and the other to store previous scores. Let's call them previousStates and previousScores. You can initialize them immediately when they are declared or in the constructor. Use the standard stack implementation (java.util.Stack).

Add a boolean isSaveNeeded field and set it to true. We'll need it in the future.

We have places to store state. Now we'll implement two methods to work with them.
1. The private saveState method with one Tile[][] parameter will use the push method to save the current game board and score in stacks and set the isSaveNeeded flag to false.
2. The public rollback method will use the pop method to set the current game state to the last state added to the stacks.

Note that when you save the gameTiles array, you need to create a new array and populate it with new Tile objects before saving it to the stack.

In the rollback method, perform a simple assignment (gameTiles = previousStates.pop()) and do the same for the score. There's no need for a deep copy.

Before restoring the game state using the rollback method, don't forget to check whether the stacks are empty to avoid throwing an EmptyStackException

Part 12
Well, shall we try our algorithm in action? We still need to add logic to save the game state at the beginning of each movement method, as well as another key processing case for undoing the last move.

When saving the current state to the stack, be sure that the current state is always saved and only once. If you listened to my advice and used rotations and a call to the left method to implement the right, up, and down method, you can use the following approach:
1) At the very beginning of the right, up, and down methods, call the saveState method with gameTiles as the argument.
2) In the left method, check whether the saveState method has already been called. We have the isSaveNeeded flag for this. If it is true, we save the state. After performing a left shift, we set the isSaveNeeded flag to true.

Also, make the Controller class's keyPressed method call the rollback method when the Z key (code KeyEvent.VK_Z) is pressed.

Part 13
Your progress is impressive! To change things up, I suggest giving the game the ability to choose the next move on its own.

Let's start with the simple. In the Model class, implement a randomMove that randomly calls one of the movement methods. You can implement this by calculating n = ((int) (Math.random () * 100)) % 4.
The resulting number will be a pseudorandom integer in the range [0..3]. You can associate each number in this range with one of the methods left, right, up, or down.

Don't forget to add a call to the randomMove method in the Controller class's keyPressed method in response to a press of the R key (code - KeyEvent.VK_R).

P.S. I'll leave you entirely responsible for checking the correctness of the randomMove method. I'll only check for the presence of a call to the Math.random() method.

Part 14
A random move is certainly not bad, but it's much cooler to implement the ability to make smart moves. We won't get bogged down in neural networks. To start, we'll focus on a fairly simple idea.

Obviously, a good move should eventually bring us closer to victory, namely, a tile with 2048.

I propose the following option for comparing the fitness of different moves:
1) Move 1 is better than Move 2 if it results in more empty tiles on the board than Move 2.
2) Move 1 is better than Move 2 if it results in a higher total score than Move 2.

To make this comparison, we can make a move, evaluate its fitness, and then undo the move to return the game to its initial state. Applying this sequence of actions to all four movement options, we can identify the best move and execute it.

Conceptually, we need two classes: one to describe the move, and another to describe its fitness.

Create a Move interface with one void move method. Annotate the interface with the @FunctionalInterface annotation type, which indicates that there will be only one abstract method in this interface.

Create a MoveFitness class that describes the fitness of the move. It will need to have private int numberOfEmptyTiles and scores fields, as well as a private Move move field.
The MoveFitness class needs a constructor with three parameters (int numberOfEmptyTiles, int score, Move move) for initializing the fields, and a getter for the move field.

Part 15
To compare the fitness of different moves, we need to implement support for the Comparable interface in the MoveFitness class.

In the compareTo method, compare the numbers of empty tiles (numberOfEmptyTiles) first. If the number of empty tiles is equal, then compare the scores (score). If the scores are also equal, then we will consider the moves to be equally fit and return zero.

Next we move to the Model class and implement two methods:
1) boolean hasBoardChanged - It returns true if the tile weights in the gameTiles array differs from the tile weights in the topmost array of the previousStates stack. Note that we must not remove the top element from the stack. Use the peek method.
2) MoveFitness getMoveFitness(Move move) - It has one Move parameter, and returns a MoveFitness object that describes the fitness of the passed move. Here are some tips:
a) don't forget to call the rollback method to restore the correct game state;
b) if the move doesn't change the state of the game board, make the number of empty tiles and the score of the MoveFitness object -1 and 0, respectively;
c) you can make a move by calling the move method on the object passed as an argument.

Part 16
You're almost there! We have a way to determine the fitness of any move, and we can also compare moves.

Let's implement an autoMove method in the Model class. It will choose and execute the best possible move.

Let's do the following:
1) Create a local PriorityQueue with capacity for four elements, passing in Collections.reverseOrder() (that way the maximum element is always at the top of the queue).
2) Fill in PriorityQueue with four MoveFitness objects (one for each possible move).
3) Take the top element and execute associated move.

After implementing the autoMove method, add a call to this method in the Controller class's keyPressed method in response to a press of the A key (code - KeyEvent.VK_A).
P.S. As an optional exercise, you can read about method references and try to use the "::" operator to pass an argument to the getMoveFitness method. For the left method, you would use getMoveFitness(this::left). Alternatively, you can use an anonymous class.

Part 17
Congratulations on implementing your own version of the game 2048!

You implemented not only the basic functionality, but also the ability to undo the last move and automatically select the best move by evaluating the fitness of a single move.

Possible improvements you could make include trying to increase the depth of your move fitness analysis and see whether your algorithm can achieve the maximum possible score of 839,732 points.
